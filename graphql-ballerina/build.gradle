/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - GraphQl Ballerina'

configurations {
    jbalTools
}

dependencies {
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(':graphql-native')
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        into("bir-cache/") {
            from "${artifactExtractedPath}/caches/bir"
        }
        into("bre/lib/") {
            from "${artifactExtractedPath}/libs"
        }
        into("docs/") {
            from "${artifactExtractedPath}/docs"
        }
        // pack to new cache
        into("cache/bir/") {
            from "${artifactExtractedPath}/caches/bir"
        }
        into("cache/balo/") {
            from "${artifactExtractedPath}/caches/balo"
        }
        into("cache/jar/") {
            from "${artifactExtractedPath}/caches/jar"
        }
    }
}

def moduleName = "graphql"
def moduleOrg = "ballerina"
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def tomlVersion = project.version.split("-")[0]
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def targetBallerinaJar = file("$project.projectDir/target/caches/jar_cache/${moduleOrg}/${moduleName}/${tomlVersion}/${moduleOrg}-${moduleName}-${tomlVersion}.jar")
def targetNativeJar = file("$project.rootDir/${moduleName}-native/build/libs/${moduleName}-native-${project.version}.jar")
def originalConfig = ballerinaConfigFile.text
def distributionBinPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"

task updateTomlFile {
    doLast {
        def stdlibDependentAuthVersion = project.stdlibAuthVersion.split("-")[0]
        def stdlibDependentCacheVersion = project.stdlibCacheVersion.split("-")[0]
        def stdlibDependentConfigVersion = project.stdlibConfigVersion.split("-")[0]
        def stdlibDependentCryptoVersion = project.stdlibCryptoVersion.split("-")[0]
        def stdlibDependentFileVersion = project.stdlibFileVersion.split("-")[0]
        def stdlibDependentFilepathVersion = project.stdlibFilepathVersion.split("-")[0]
        def stdlibDependentHttpVersion = project.stdlibHttpVersion.split("-")[0]
        def stdlibDependentIoVersion = project.stdlibIoVersion.split("-")[0]
        def stdlibDependentLogVersion = project.stdlibLogVersion.split("-")[0]
        def stdlibDependentMimeVersion = project.stdlibMimeVersion.split("-")[0]
        def stdlibDependentReflectVersion = project.stdlibReflectVersion.split("-")[0]
        def stdlibDependentRuntimeVersion = project.stdlibRuntimeVersion.split("-")[0]
        def stdlibDependentStringutilsVersion = project.stdlibStringutilsVersion.split("-")[0]
        def stdlibDependentSystemVersion = project.stdlibSystemVersion.split("-")[0]
        def stdlibDependentTaskVersion = project.stdlibTaskVersion.split("-")[0]
        def stdlibDependentTimeVersion = project.stdlibTimeVersion.split("-")[0]

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@stdlib.auth.version@", stdlibDependentAuthVersion)
        newConfig = newConfig.replace("@stdlib.cache.version@", stdlibDependentCacheVersion)
        newConfig = newConfig.replace("@stdlib.config.version@", stdlibDependentConfigVersion)
        newConfig = newConfig.replace("@stdlib.crypto.version@", stdlibDependentCryptoVersion)
        newConfig = newConfig.replace("@stdlib.file.version@", stdlibDependentFileVersion)
        newConfig = newConfig.replace("@stdlib.filepath.version@", stdlibDependentFilepathVersion)
        newConfig = newConfig.replace("@stdlib.http.version@", stdlibDependentHttpVersion)
        newConfig = newConfig.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newConfig = newConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
        newConfig = newConfig.replace("@stdlib.mime.version@", stdlibDependentMimeVersion)
        newConfig = newConfig.replace("@stdlib.runtime.version@", stdlibDependentRuntimeVersion)
        newConfig = newConfig.replace("@stdlib.reflect.version@", stdlibDependentReflectVersion)
        newConfig = newConfig.replace("@stdlib.stringutils.version@", stdlibDependentStringutilsVersion)
        newConfig = newConfig.replace("@stdlib.system.version@", stdlibDependentSystemVersion)
        newConfig = newConfig.replace("@stdlib.task.version@", stdlibDependentTaskVersion)
        newConfig = newConfig.replace("@stdlib.time.version@", stdlibDependentTimeVersion)

        ballerinaConfigFile.text = newConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
    }
}

task ballerinaTest {
    dependsOn(":graphql-native:build")
    dependsOn(unpackJballerinaTools)
    dependsOn(updateTomlFile)
    finalizedBy(revertTomlFile)

    def groupParams = ""
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty("groups")}"
    }

    def debugParams = ""
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }

    def balJavaDebugParam = ""
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }

    doLast {
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/ballerina.bat test --code-coverage ${groupParams} --all ${debugParams} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/ballerina test --code-coverage ${groupParams} --all ${debugParams}"
            }
        }
    }
}

test {
    dependsOn(ballerinaTest)
}

task ballerinaBuild {
    inputs.dir file(project.projectDir)
    dependsOn(":graphql-native:build")
    dependsOn(test)
    dependsOn(unpackJballerinaTools)
    dependsOn(updateTomlFile)
    finalizedBy(revertTomlFile)

    doLast {
        // Build and populate caches
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat build --skip-tests -c ${moduleName}"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina build --skip-tests -c ${moduleName}"
            }
        }
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("$artifactCacheParent/caches/bir/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("$artifactCacheParent/caches/balo/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("$artifactCacheParent/caches/jar/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from file("$project.projectDir/target/caches/bir_cache")
            into file("$artifactCacheParent/caches/bir")
        }
        copy {
            from file("$project.projectDir/target/balo")
            into file("$artifactCacheParent/caches/balo/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from targetBallerinaJar
            into file("$artifactCacheParent/caches/jar/${moduleOrg}/${moduleName}/${tomlVersion}")
        }
        copy {
            from targetBallerinaJar
            into file("$artifactLibParent/libs")
        }
        copy {
            from targetNativeJar
            into file("$artifactLibParent/libs")
        }

        // Publish to central
        if (!project.version.endsWith('-SNAPSHOT') && ballerinaCentralAccessToken != null && project.hasProperty("publishToCentral")) {
            println("Publishing to the ballerina central...")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat push ${moduleName} && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/ballerina push ${moduleName}"
                }
            }

        }
        // Doc creation and packing
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat doc ${moduleName} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina doc ${moduleName}"
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/${moduleName}")
            into file("$project.projectDir/build/docs_parent/docs/${moduleName}")
        }
        ballerinaConfigFile.text = originalConfig
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-ballerina-graphql")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

unpackStdLibs.dependsOn unpackJballerinaTools
copyStdlibs.dependsOn unpackStdLibs
updateTomlFile.dependsOn copyStdlibs
ballerinaBuild.dependsOn updateTomlFile
ballerinaBuild.dependsOn ":graphql-native:build"
build.dependsOn ballerinaBuild
